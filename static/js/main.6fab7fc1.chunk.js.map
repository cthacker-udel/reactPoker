{"version":3,"sources":["index.js"],"names":["PokerCard","props","src","cardName","style","height","width","rounded","MainPage","sameSuit","cards","suits","theSuits","i","length","j","includes","Object","keys","map","e","some","consecutive","ranks","theNumRanks","theCard","push","sort","a","b","Set","cnt","iRank","jRank","Math","abs","getCardRank","card","rankCount","undefined","replace","filter","cardCombos","res","foundMatch","royalFlush","straightFlush","eachcard","fourOfAKind","found2kind","found3kind","fullHouse","flush","straight","threeOfAKind","rankSet","rank","add","eachrank","twoPairs","onePair","useState","array","randomIndex","currentIndex","floor","random","shuffle","playerHand","setPlayerHand","computerHand","setComputerHand","tableCards","setTableCards","chips","thePlayerCards","setThePlayerCards","theTableCards","setTheTableCards","theComputerCards","setTheComputerCards","console","log","fluid","textAlign","border","variant","margin","display","onClick","amt","theCards","count","aStr","pop","tableCardsInit","playerCardsInit","computerCardsInit","document","getElementById","innerHTML","id","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6fab7fc1.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Image from 'react-bootstrap/Image'\r\n\r\n\r\nfunction PokerCard(props){\r\n\r\n    return(\r\n\r\n        \r\n        <Image src={'./cards/' + props.cardName + '.PNG'} style={{height: \"100px\", width: \"100px\"}} rounded />\r\n\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nfunction MainPage(){\r\n\r\n    /*\r\n\r\n        POKER METHODS\r\n\r\n    */\r\n\r\n        const royalFlush = (cards) => {\r\n\r\n            let suits = ['hearts','clubs','spades','diamonds'];\r\n            let ranks = ['ace','king','queen','jack','ten'];\r\n        \r\n            let foundMatch = false;\r\n            for(let i = 0; i < suits.length; i++){\r\n                foundMatch = true;\r\n                for(let j = 0; j < ranks.length; j++){\r\n        \r\n                    if(cards.includes(`${ranks[j]}${suits[i]}`)){\r\n                        continue;\r\n                    }\r\n                    else{\r\n                        foundMatch = false;\r\n                        break;\r\n                    }\r\n        \r\n                }\r\n                if(foundMatch){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        \r\n        }\r\n        \r\n        const sameSuit = (cards) => {\r\n        \r\n            let suits = ['hearts','clubs','spades','diamonds'];\r\n        \r\n            let theSuits = {'hearts': 0, 'clubs': 0, 'spades': 0, 'diamonds': 0};\r\n        \r\n            for(let i = 0; i < cards.length; i++){\r\n        \r\n                for(let j of suits){\r\n                    if(cards[i].includes(j)){\r\n                        theSuits[j] += 1;\r\n                    }\r\n                }\r\n        \r\n            }\r\n            return Object.keys(theSuits).map(e => theSuits[e]).some(e => e >= 5);\r\n        \r\n        }\r\n        \r\n        const consecutive = (cards) => {\r\n\r\n            let ranks = {'ace': 14, 'king': 13, 'queen': 12, 'jack': 11, 'ten': 10, 'nine': 9, 'eight': 8, 'seven': 7, 'six': 6, 'five': 5, 'four': 4, 'three': 3, 'two': 2};\r\n        \r\n            let theNumRanks = [];\r\n            for(let i = 0; i < cards.length; i++){\r\n                let theCard = cards[i];\r\n                for(let j of Object.keys(ranks)){\r\n                    if(theCard.includes(j)){\r\n                        theNumRanks.push(ranks[j]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        \r\n            theNumRanks.sort((a,b) => a-b);\r\n            theNumRanks = [...new Set(theNumRanks)];\r\n            let cnt = 0;\r\n            for(let i = 0; i < theNumRanks.length-1; i++){\r\n        \r\n                let iRank = theNumRanks[i];\r\n                let jRank = theNumRanks[i+1];\r\n                if(Math.abs(iRank - jRank) === 1){\r\n                    cnt++;\r\n                }\r\n                else if(cnt === 4){\r\n                    return true;\r\n                }\r\n                else if(Math.abs(iRank - jRank) !== 1){\r\n                    cnt = 0;\r\n                }\r\n        \r\n            }\r\n            return false;\r\n        \r\n        }\r\n        \r\n        const getCardRank = (card) => {\r\n        \r\n            let ranks = {'ace': 14, 'king': 13, 'queen': 12, 'jack': 11, 'ten': 10, 'nine': 9, 'eight': 8, 'seven': 7, 'six': 6, 'five': 5, 'four': 4, 'three': 3, 'two': 2};\r\n        \r\n            for(let i of Object.keys(ranks)){\r\n                if(card.includes(i)){\r\n                    return ranks[i];\r\n                }\r\n            }\r\n        \r\n        }\r\n        \r\n        const straightFlush = (cards) => {\r\n        \r\n            if(!sameSuit(cards)){\r\n                return false;\r\n            }\r\n            if(!consecutive(cards)){\r\n                return false;\r\n            }\r\n            cards.sort((a,b) => getCardRank(a) - getCardRank(b));\r\n        \r\n        \r\n        \r\n        }\r\n\r\n        const rankCount = (card,cards) => {\r\n\r\n            if(cards === undefined || card === undefined){\r\n                return 0;\r\n            }\r\n\r\n            cards = cards.map(e => e.replace('hearts','').replace('spades','').replace('diamonds','').replace('clubs',''));\r\n\r\n            card = card.replace('hearts','').replace('spades','').replace('diamonds','').replace('clubs','');\r\n\r\n            return cards.filter(e => e === card).length;\r\n\r\n\r\n        }\r\n\r\n        const fourOfAKind = (cards) => {\r\n\r\n            for(let eachcard of cards){\r\n\r\n                let cnt = rankCount(eachcard,cards);\r\n                if(cnt === 4){\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            return false;\r\n\r\n        }\r\n\r\n        const fullHouse = (cards) => {\r\n\r\n            let found2kind = false;\r\n            let found3kind = false;\r\n\r\n            for(let eachcard of cards){\r\n\r\n                let cnt = rankCount(eachcard,cards);\r\n                if(cnt === 2){\r\n                    found2kind = true;\r\n                }\r\n                else if(cnt === 3){\r\n                    found3kind = true;\r\n                }\r\n\r\n            }\r\n            return found2kind && found3kind;\r\n\r\n        }\r\n\r\n        const flush = (cards) => {\r\n\r\n            return sameSuit(cards);\r\n\r\n        }\r\n\r\n        const straight = (cards) => {\r\n\r\n            return consecutive(cards);\r\n\r\n        }\r\n\r\n        const threeOfAKind = (cards) => {\r\n\r\n            for(let eachcard of cards){\r\n\r\n                let res = rankCount(eachcard,cards);\r\n                if(res === 3){\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            return false;\r\n\r\n        }\r\n\r\n        const twoPairs = (cards) => {\r\n\r\n            let cnt = 0;\r\n            let rankSet = new Set();\r\n            for(let eachcard of cards){\r\n\r\n                let rank = eachcard.replace('hearts','').replace('spades','').replace('diamonds','').replace('clubs','');\r\n                rankSet.add(rank);\r\n\r\n            }\r\n            for(let eachrank of rankSet){\r\n\r\n                let res = rankCount(eachrank,cards);\r\n                if(res === 2){\r\n                    cnt++;\r\n                }\r\n\r\n            }\r\n            return cnt === 2;\r\n\r\n        }\r\n\r\n        const onePair = (cards) => {\r\n\r\n            for(let eachcard of cards){\r\n\r\n                let rank = eachcard.replace('hearts','').replace('spades','').replace('diamonds','').replace('clubs','');\r\n                if(rankCount(rank,cards) === 2){\r\n                    return true;\r\n                }\r\n\r\n            }\r\n            return false;\r\n\r\n        }\r\n\r\n\r\n\r\n        const cardCombos = (cards) => {\r\n\r\n            /*\r\n\r\n                1 - royal flush\r\n                2 - straight flush\r\n                3 - four of a kind\r\n                4 - full house\r\n                5 - flush\r\n                6 - straight\r\n                7 - three of a kind\r\n                8 - two pairs\r\n\r\n            */\r\n\r\n            let res = 0;\r\n\r\n            if(royalFlush(cards)){\r\n                res = 1;\r\n            }\r\n            else if(straightFlush(cards)){\r\n                res = 2;\r\n            }\r\n            else if(fourOfAKind(cards)){\r\n                res = 3;\r\n            }\r\n            else if(fullHouse(cards)){\r\n                res = 4;\r\n            }\r\n            else if(flush(cards)){\r\n                res = 5;\r\n            }\r\n            else if(straight(cards)){\r\n                res = 6;\r\n            }\r\n            else if(threeOfAKind(cards)){\r\n                res = 7;\r\n            }\r\n            else if(twoPairs(cards)){\r\n                res = 8;\r\n            }\r\n            else if(onePair(cards)){\r\n                res = 9;\r\n            }\r\n            return res;\r\n\r\n        }\r\n\r\n\r\n    /*\r\n\r\n        POKER METHODS\r\n\r\n    */\r\n\r\n    /* from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array [first answer] */\r\n    const shuffle = (array) => {\r\n\r\n        for(let i = 0; i < 10; i++){\r\n            var currentIndex = array.length,  randomIndex;\r\n\r\n            // While there remain elements to shuffle...\r\n            while (currentIndex !== 0) {\r\n\r\n                // Pick a remaining element...\r\n                randomIndex = Math.floor(Math.random() * currentIndex);\r\n                currentIndex--;\r\n\r\n                // And swap it with the current element.\r\n                [array[currentIndex], array[randomIndex]] = [\r\n                array[randomIndex], array[currentIndex]];\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    const [cards,setCards] = useState(shuffle(['acehearts','kinghearts','queenhearts','jackhearts','tenhearts','ninehearts','eighthearts','sevenhearts','sixhearts','fivehearts','fourhearts','threehearts',\r\n                                'twohearts','acediamonds','kingdiamonds','queendiamonds','jackdiamonds','tendiamonds','ninediamonds','eightdiamonds','sevendiamonds','sixdiamonds','fivediamonds',\r\n                                'fourdiamonds','threediamonds','twodiamonds','acespades','kingspades','queenspades','jackspades','tenspades','ninespades','eightspades','sevenspades',\r\n                                'sixspades','fivespades','fourspades','threespades','twospades','aceclubs','kingclubs','queenclubs','jackclubs','tenclubs','nineclubs','eightclubs',\r\n                                'sevenclubs','sixclubs','fiveclubs','fourclubs','threeclubs','twoclubs'\r\n                                ]));\r\n\r\n    const [playerHand,setPlayerHand] = useState([]);\r\n    const [computerHand,setComputerHand] = useState([]);\r\n    const [tableCards,setTableCards] = useState([]);\r\n    const [playerTurn,setPlayerTurn] = useState(true);\r\n    const [chips,setChips] = useState(0);\r\n    const [gameStarted,setGameStarted] = useState(false);\r\n    const [mainButtonTextBool,setMainButtonTextBool] = useState(false);\r\n    const [thePlayerCards,setThePlayerCards] = useState([]);\r\n    const [theTableCards,setTheTableCards] = useState([]);\r\n    const [theComputerCards,setTheComputerCards] = useState([]);\r\n\r\n    const determineTurn = () => {\r\n\r\n        Math.floor(Math.random() * (2) + 0) === 1? setPlayerTurn(true): setPlayerTurn(false);\r\n\r\n    }\r\n\r\n    const tableCardsInit = () => {\r\n\r\n        if(tableCards.length === 5){\r\n            // max amt of cards\r\n            return;\r\n        }\r\n        let amt = (playerHand.length > 0? 1: 3);\r\n\r\n        if(cards.length === 0){\r\n            return;\r\n        }\r\n        let theCards = tableCards;\r\n        let count = 0;\r\n        while(count < amt && cards.length > 0){\r\n            const aStr = cards.pop();\r\n            theCards.push(aStr);\r\n            count++;\r\n        }\r\n        setTableCards(theCards);\r\n        //console.log(state);\r\n        setTheTableCards(theCards.map((e,i) => {\r\n\r\n            return(\r\n    \r\n                <PokerCard cardName={e} key={e} />\r\n    \r\n            );\r\n    \r\n        }));\r\n        console.log(`theCards = ${theCards}`);\r\n        return;\r\n\r\n    }\r\n\r\n    const playerCardsInit = () => {\r\n\r\n        if(playerHand.length === 2){\r\n            // max amt of player cards\r\n            return;\r\n        }\r\n        if(cards.length === 0){\r\n            return;\r\n        }\r\n        let theCards = playerHand;\r\n        for(let i = 0; i < 2; i++){\r\n            const aStr = cards.pop();\r\n            theCards.push(aStr);\r\n        }\r\n        setPlayerHand(theCards);\r\n        setThePlayerCards(theCards.map((e,i) => {\r\n\r\n            return(\r\n    \r\n                <PokerCard cardName={e} key={e} />\r\n    \r\n            );\r\n    \r\n        }));\r\n        //console.log(state);\r\n\r\n    }\r\n\r\n    const computerCardsInit = () => {\r\n        \r\n        if(computerHand.length === 2){\r\n            return;\r\n        }\r\n        if(cards.length === 0){\r\n            return;\r\n        }\r\n        let theCards = computerHand;\r\n        for(let i = 0; i < 2; i++){\r\n            const aStr = cards.pop();\r\n            theCards.push(aStr);\r\n        }\r\n        setComputerHand(theCards);\r\n        setTheComputerCards(theCards.map((e,i) => {\r\n\r\n            return(\r\n    \r\n                <PokerCard cardName={\"backofcard\"} key={e} />\r\n    \r\n            );\r\n    \r\n        }));\r\n        //console.log(state);\r\n\r\n    }\r\n\r\n    const startGame = () => {\r\n\r\n        /*\r\n\r\n        Calculate card combos\r\n\r\n        */\r\n\r\n        let tableRes = tableCardsInit();\r\n\r\n        console.log(`Playerhand = ${playerHand} and computerHand = ${computerHand} and tableCards = ${tableCards}`);\r\n\r\n        playerCardsInit();\r\n        computerCardsInit();\r\n        if(tableCards.length > 0){\r\n            let res = [...tableCards,...playerHand];\r\n            console.log(`the hand = ${res}`);\r\n            res = cardCombos(res);\r\n            console.log(`The result was : ${res}`);\r\n        }\r\n\r\n        document.getElementById('mainButton').innerHTML = \"Deal Table Card\";\r\n\r\n    }\r\n\r\n    console.log(`theplayercards = ${thePlayerCards}`);\r\n\r\n    return(\r\n        \r\n        <>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col><h1 style={{textAlign: \"center\"}}>Poker Game</h1></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col><h3 style={{textAlign: \"center\"}}>Wins : 0</h3></Col>\r\n                        <Col><h3 style={{textAlign: \"center\"}}>Chips : {chips}</h3></Col>\r\n                        <Col><h3 style={{textAlign: \"center\"}}>Losses : 0</h3></Col>\r\n                    </Row>\r\n                    <br />\r\n                    <br />\r\n                    <br />\r\n                    <Row>\r\n                        <Col>\r\n\r\n                            <h4 style={{textAlign: \"center\"}}>Table Cards</h4>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n\r\n                        <Col style={{border: \"2px dashed black\"}}>{theTableCards}</Col>\r\n\r\n                    </Row>\r\n                    <br />\r\n                    <Row>\r\n\r\n                        <Col>\r\n                        \r\n                        <h4 style={{textAlign: \"center\"}}>Computer Cards</h4>\r\n                        \r\n                        </Col>\r\n\r\n                    </Row>\r\n                    <Row>\r\n\r\n                        <Col style={{border: \"2px dashed black\"}}>{theComputerCards}</Col>\r\n\r\n                    </Row>\r\n                    <Row>\r\n                        <Col style={{textAlign: \"center\"}}><h4>Player Cards</h4></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col style={{border: \"2px dashed black\"}}>{thePlayerCards}</Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col>\r\n                            <Button variant=\"primary\" style={{margin: \"auto\", display: \"block\", textAlign: \"center\"}}>Fold</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button variant=\"primary\" style={{margin: \"auto\", display: \"block\", textAlign: \"center\"}}>Raise</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button variant=\"primary\" style={{margin: \"auto\", display: \"block\", textAlign: \"center\"}}>Call</Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <br />\r\n                    <Row>\r\n\r\n                        <Col>\r\n                            <Button variant=\"primary\" onClick={startGame} style={{margin: \"auto\", display: \"block\", textAlign: \"center\"}} id=\"mainButton\">Start Game</Button>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nReactDOM.render(\r\n\r\n    <React.StrictMode>\r\n\r\n        <MainPage />\r\n\r\n    </React.StrictMode>,document.getElementById('root')\r\n\r\n);"],"sourceRoot":""}