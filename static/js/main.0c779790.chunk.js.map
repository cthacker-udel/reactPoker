{"version":3,"sources":["components/PokerCard.tsx","components/ControlPanel.tsx","utilities/PokerMethods.ts","components/ScoreBoard.tsx","components/RaiseForm.tsx","components/ChipInitializer.tsx","components/RaiseSend.tsx","components/MainPage.tsx","App.tsx","index.tsx"],"names":["PokerCard","props","Image","src","process","cardName","style","height","width","rounded","ControlPanel","Row","Col","Button","variant","theTurn","margin","display","textAlign","onClick","foldFunc","raiseFunc","callFunc","sameSuit","cards","iSuits","theSuits","i","length","j","includes","Object","keys","map","e","some","consecutive","theRanks","theNumRanks","theCard","push","sort","a","b","Set","cnt","iRank","jRank","Math","abs","getCardRank","card","ranks","rankCount","undefined","replace","filter","cardCombos","res","suits","foundMatch","royalFlush","straightFlush","eachcard","fourOfAKind","found2kind","found3kind","fullHouse","flush","straight","threeOfAKind","rankSet","rank","add","eachrank","twoPairs","onePair","getHighCard","hand","shuffle","array","randomIndex","currentIndex","floor","random","isPrime","num","ceil","sqrt","ScoreBoard","ListGroup","horizontal","Item","userWins","computerWins","userChips","computerChips","userLosses","computerLosses","RaiseForm","useState","Modal","show","appear","onHide","console","log","Header","raiseAmt","Footer","ChipInitializer","chipAmount","setChipAmount","Body","Form","Group","className","controlId","Label","playerChips","Control","type","value","placeholder","name","onChange","htmlInputElement","target","parseInt","isNaN","tmpChipAmount","substring","alert","amt","String","Text","submitChips","RaiseSend","MainPage","fullDeck","deck","setDeck","moveSelected","setMoveSelected","playerHand","setPlayerHand","computerHand","setComputerHand","tableCards","setTableCards","turn","setTurn","setComputerChips","setUserChips","totalChips","setTotalChips","setComputerWins","setUserWins","setComputerLosses","setUserLosses","gameStarted","setGameStarted","thePlayerCards","setThePlayerCards","theTableCards","setTheTableCards","theComputerCards","setTheComputerCards","mainButtonText","setMainButtonText","raise","setRaise","userRaise","setUserRaise","setRaiseAmt","call","setCall","strengthText","setStrengthText","modalAppear","setModalAppear","endGame","user","tmpCmpLosses","tmpUserLosses","tmpCmpWins","tmpUserWins","tmpUserChips","tmpComputerChips","halfOfChips","round","useEffect","compDecision","userCards","computerCards","computerHandRank","playerHandRank","randomNumber","computerDecide","raiseAmount","compRank","userRank","drawCards","handStrength","isComputer","setHand","amount","setJSXHand","cardsDrawn","pop","concat","newHand","Container","fluid","Card","Badge","bg","border","id","decision","tmpTotalChips","cmpDecisionR","computerDecideRaised","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c779790.chunk.js","sourcesContent":["import Image from 'react-bootstrap/Image';\r\n\r\nexport function PokerCard(props: {cardName: string}): JSX.Element{\r\n\r\n    //console.log(`url = ${process.env.PUBLIC_URL}/cards/${props.cardName}.PNG`);\r\n\r\n    return(\r\n\r\n        \r\n        <Image src={`${process.env.PUBLIC_URL}/cards/${props.cardName}.PNG`} style={{height: \"100px\", width: \"100px\"}} rounded />\r\n\r\n\r\n    );\r\n\r\n\r\n}","import Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport React from 'react';\r\n\r\nexport const ControlPanel = (props: {theTurn: boolean, foldFunc: () => void, callFunc: () => void, raiseFunc: () => void}): JSX.Element => {\r\n\r\n    return(\r\n    <>\r\n        <Row>\r\n            <Col>\r\n                <Button variant={props.theTurn? \"primary\": \"secondary\"} style={{margin: \"auto\", display: \"block\", textAlign: \"center\"}} onClick={props.foldFunc}>Fold</Button>\r\n            </Col>\r\n            <Col>\r\n                <Button variant={props.theTurn? \"primary\": \"secondary\"} style={{margin: \"auto\", display: \"block\", textAlign: \"center\"}} onClick={props.raiseFunc}>Raise</Button>\r\n            </Col>\r\n            <Col>\r\n                <Button variant={props.theTurn? \"primary\": \"secondary\"} style={{margin: \"auto\", display: \"block\", textAlign: \"center\"}} onClick={props.callFunc}>Call</Button>\r\n            </Col>\r\n        </Row>\r\n    </>\r\n    );\r\n\r\n}","\r\n/*\r\n\r\nPOKER METHODS\r\n\r\n*/\r\n\r\nexport const royalFlush = (cards: string[]): boolean => {\r\n\r\n    let suits = ['hearts','clubs','spades','diamonds'];\r\n    let ranks = ['ace','king','queen','jack','ten'];\r\n\r\n    let foundMatch = false;\r\n    for(let i = 0; i < suits.length; i++){\r\n        foundMatch = true;\r\n        for(let j = 0; j < ranks.length; j++){\r\n\r\n            if(cards.includes(`${ranks[j]}${suits[i]}`)){\r\n                continue;\r\n            }\r\n            else{\r\n                foundMatch = false;\r\n                break;\r\n            }\r\n\r\n        }\r\n        if(foundMatch){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n\r\n}\r\n\r\nexport const sameSuit = (cards: string[]): boolean => {\r\n\r\n    let iSuits = ['hearts','clubs','spades','diamonds'];\r\n\r\n    interface suits {\r\n\r\n        [index: string]: number\r\n        'hearts': number\r\n        'clubs': number\r\n        'spades': number\r\n        'diamonds': number\r\n\r\n    }\r\n\r\n\r\n    let theSuits: suits = {'hearts': 0, 'clubs': 0, 'spades': 0, 'diamonds': 0};\r\n\r\n    for(let i = 0; i < cards.length; i++){\r\n\r\n        for(let j of iSuits){\r\n            if(cards[i].includes(j)){\r\n                theSuits[j] += 1;\r\n            }\r\n        }\r\n\r\n    }\r\n    return Object.keys(theSuits).map(e => theSuits[e]).some(e => e >= 5);\r\n\r\n}\r\n\r\nexport const consecutive = (cards: string[]): boolean => {\r\n\r\n    interface ranks{\r\n\r\n        [index: string]: number\r\n        'ace': number\r\n        'king': number\r\n        'queen': number\r\n        'jack': number\r\n        'ten': number\r\n        'nine': number\r\n        'eight': number\r\n        'seven': number\r\n        'six': number\r\n        'five': number\r\n        'four': number\r\n        'three': number\r\n        'two': number\r\n\r\n    }\r\n\r\n\r\n    let theRanks: ranks = {'ace': 14, 'king': 13, 'queen': 12, 'jack': 11, 'ten': 10, 'nine': 9, 'eight': 8, 'seven': 7, 'six': 6, 'five': 5, 'four': 4, 'three': 3, 'two': 2};\r\n\r\n    let theNumRanks: number[] = [];\r\n    for(let i = 0; i < cards.length; i++){\r\n        let theCard = cards[i];\r\n        for(let j of Object.keys(theRanks)){\r\n            if(theCard.includes(j)){\r\n                theNumRanks.push(theRanks[j]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    theNumRanks.sort((a,b) => a-b);\r\n    theNumRanks = [...new Set(theNumRanks)];\r\n    let cnt = 0;\r\n    for(let i = 0; i < theNumRanks.length-1; i++){\r\n\r\n        let iRank = theNumRanks[i];\r\n        let jRank = theNumRanks[i+1];\r\n        if(Math.abs(iRank - jRank) === 1){\r\n            cnt++;\r\n        }\r\n        else if(cnt === 4){\r\n            return true;\r\n        }\r\n        else if(Math.abs(iRank - jRank) !== 1){\r\n            cnt = 0;\r\n        }\r\n\r\n    }\r\n    return false;\r\n\r\n}\r\n\r\nexport const getCardRank = (card: string): number => {\r\n\r\n    interface theRanks{\r\n\r\n        [index: string]: number\r\n        'ace': number\r\n        'king': number\r\n        'queen': number\r\n        'jack': number\r\n        'ten': number\r\n        'nine': number\r\n        'eight': number\r\n        'seven': number\r\n        'six': number\r\n        'five': number\r\n        'four': number\r\n        'three': number\r\n        'two': number\r\n\r\n    }\r\n\r\n\r\n    let ranks: theRanks = {'ace': 14, 'king': 13, 'queen': 12, 'jack': 11, 'ten': 10, 'nine': 9, 'eight': 8, 'seven': 7, 'six': 6, 'five': 5, 'four': 4, 'three': 3, 'two': 2};\r\n\r\n    for(let i of Object.keys(ranks)){\r\n        if(card.includes(i)){\r\n            return ranks[i];\r\n        }\r\n    }\r\n    return -1;\r\n\r\n}\r\n\r\nexport const straightFlush = (cards: string[]): boolean => {\r\n\r\n    if(!sameSuit(cards)){\r\n        return false;\r\n    }\r\n    if(!consecutive(cards)){\r\n        return false;\r\n    }\r\n    cards.sort((a,b) => getCardRank(a) - getCardRank(b));\r\n    return true;\r\n\r\n\r\n\r\n}\r\n\r\nexport const rankCount = (card: string,cards: string[]): number => {\r\n\r\n    if(cards === undefined || card === undefined){\r\n        return 0;\r\n    }\r\n\r\n    cards = cards.map(e => e.replace('hearts','').replace('spades','').replace('diamonds','').replace('clubs',''));\r\n\r\n    card = card.replace('hearts','').replace('spades','').replace('diamonds','').replace('clubs','');\r\n\r\n    return cards.filter(e => e === card).length;\r\n\r\n\r\n}\r\n\r\nexport const fourOfAKind = (cards: string[]): boolean => {\r\n\r\n    for(let eachcard of cards){\r\n\r\n        let cnt = rankCount(eachcard,cards);\r\n        if(cnt === 4){\r\n            return true;\r\n        }\r\n\r\n    }\r\n    return false;\r\n\r\n}\r\n\r\nexport const fullHouse = (cards: string[]): boolean => {\r\n\r\n    let found2kind = false;\r\n    let found3kind = false;\r\n\r\n    for(let eachcard of cards){\r\n\r\n        let cnt = rankCount(eachcard,cards);\r\n        if(cnt === 2){\r\n            found2kind = true;\r\n        }\r\n        else if(cnt === 3){\r\n            found3kind = true;\r\n        }\r\n\r\n    }\r\n    return found2kind && found3kind;\r\n\r\n}\r\n\r\nexport const flush = (cards: string[]): boolean => {\r\n\r\n    return sameSuit(cards);\r\n\r\n}\r\n\r\nexport const straight = (cards: string[]): boolean => {\r\n\r\n    return consecutive(cards);\r\n\r\n}\r\n\r\nexport const threeOfAKind = (cards: string[]): boolean => {\r\n\r\n    for(let eachcard of cards){\r\n\r\n        let res = rankCount(eachcard,cards);\r\n        if(res === 3){\r\n            return true;\r\n        }\r\n\r\n    }\r\n    return false;\r\n\r\n}\r\n\r\nexport const twoPairs = (cards: string[]): boolean => {\r\n\r\n    let cnt = 0;\r\n    let rankSet = new Set<string>();\r\n    for(let eachcard of cards){\r\n\r\n        let rank = eachcard.replace('hearts','').replace('spades','').replace('diamonds','').replace('clubs','');\r\n        rankSet.add(rank);\r\n\r\n    }\r\n    for(let eachrank of [...rankSet]){\r\n\r\n        let res = rankCount(eachrank,cards);\r\n        if(res === 2){\r\n            cnt++;\r\n        }\r\n\r\n    }\r\n    return cnt === 2;\r\n\r\n}\r\n\r\nexport const onePair = (cards: string[]): boolean => {\r\n\r\n    for(let eachcard of cards){\r\n\r\n        let rank = eachcard.replace('hearts','').replace('spades','').replace('diamonds','').replace('clubs','');\r\n        if(rankCount(rank,cards) === 2){\r\n            return true;\r\n        }\r\n\r\n    }\r\n    return false;\r\n\r\n}\r\n\r\n\r\n\r\nexport const cardCombos = (cards: string[]): number => {\r\n\r\n    /*\r\n\r\n        1 - royal flush\r\n        2 - straight flush\r\n        3 - four of a kind\r\n        4 - full house\r\n        5 - flush\r\n        6 - straight\r\n        7 - three of a kind\r\n        8 - two pairs\r\n\r\n    */\r\n\r\n    let res = 0;\r\n\r\n    if(royalFlush(cards)){\r\n        res = 1;\r\n    }\r\n    else if(straightFlush(cards)){\r\n        res = 2;\r\n    }\r\n    else if(fourOfAKind(cards)){\r\n        res = 3;\r\n    }\r\n    else if(fullHouse(cards)){\r\n        res = 4;\r\n    }\r\n    else if(flush(cards)){\r\n        res = 5;\r\n    }\r\n    else if(straight(cards)){\r\n        res = 6;\r\n    }\r\n    else if(threeOfAKind(cards)){\r\n        res = 7;\r\n    }\r\n    else if(twoPairs(cards)){\r\n        res = 8;\r\n    }\r\n    else if(onePair(cards)){\r\n        res = 9;\r\n    }\r\n    return res;\r\n\r\n}\r\n\r\nconst getHighCard = (hand: string[]): number => {\r\n\r\n    return hand.map(e => getCardRank(e)).sort((a,b) => a-b)[hand.length-1];\r\n\r\n}\r\n\r\n\r\n/*\r\n\r\n    POKER METHODS\r\n\r\n*/\r\n\r\n/* from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array [first answer] */\r\nexport const shuffle = (array: string[]): string[] => {\r\n\r\n    for(let i = 0; i < 10; i++){\r\n        var currentIndex = array.length,  randomIndex;\r\n\r\n        // While there remain elements to shuffle...\r\n        while (currentIndex !== 0) {\r\n\r\n            // Pick a remaining element...\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n\r\n            // And swap it with the current element.\r\n            [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\nexport const isPrime = (num: number): boolean => {\r\n    if(num < 2){\r\n        return true;\r\n    }\r\n    else if(num < 0){\r\n        return false;\r\n    }\r\n    else if(num === 2 || num === 3 || num === 5){\r\n        return true;\r\n    }\r\n    else{\r\n        for(let i = 2; i <= Math.ceil(Math.sqrt(num)); i++){\r\n            if(num % i === 0){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport const computerDecide = (userCards: string[], computerCards: string[], tableCards: string[]): number => {\r\n\r\n    /*\r\n\r\n    1) Call\r\n    2) Raise\r\n    3) Fold\r\n\r\n    */\r\n\r\n    let computerHandRank = cardCombos([...computerCards,...tableCards]);\r\n    let playerHandRank = cardCombos([...userCards,...tableCards]);\r\n    let randomNumber: number = Math.floor((Math.random()*100)) % Math.floor(Math.random() * 10000);\r\n\r\n    if(computerHandRank === 0){\r\n\r\n        // check if high card is better than theirs if not, fold\r\n        if(playerHandRank !== 0){\r\n            // fold\r\n            return 2;\r\n        }\r\n        else{\r\n            let compHighCard: number = getHighCard([...computerCards,...tableCards]);\r\n            let playerHighCard: number = getHighCard([...userCards,...tableCards]);\r\n            if(compHighCard > playerHighCard){\r\n                // call\r\n                return 1;\r\n            }\r\n            else if(isPrime(randomNumber)){\r\n                // fold\r\n                return 3;\r\n            }\r\n            else{\r\n                return 1;\r\n            }\r\n        }\r\n\r\n    }\r\n    else{\r\n\r\n        if(computerHandRank > playerHandRank){\r\n            // determine whether to call or raise\r\n            if(randomNumber % 2 === 0){\r\n                // call\r\n                return 1;\r\n            }\r\n            else{\r\n                // raise\r\n                return 2;\r\n            }\r\n        }\r\n        else if(computerHandRank === playerHandRank){\r\n\r\n            if(randomNumber % 2 === 0){\r\n                // call\r\n                return 1;\r\n            }\r\n            else if(randomNumber % 2 !== 0){\r\n                // raise\r\n                return 2;\r\n            }\r\n            else if(isPrime(randomNumber)){\r\n                // fold\r\n                return 3;\r\n            }\r\n            else{\r\n                return 1;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return -1;\r\n\r\n}\r\n\r\nexport const computerDecideRaised = (userCards: string[], computerCards: string[], tableCards: string[]): number => {\r\n\r\n    /*\r\n\r\n    1) Call\r\n    2) Raise\r\n    3) Fold\r\n\r\n    */\r\n\r\n    let computerHandRank = cardCombos([...computerCards,...tableCards]);\r\n    let playerHandRank = cardCombos([...userCards,...tableCards]);\r\n    let randomNumber: number = Math.floor((Math.random()*100)) % Math.floor(Math.random() * 10000);\r\n\r\n    if(computerHandRank === 0){\r\n\r\n        // check if high card is better than theirs if not, fold\r\n        if(playerHandRank !== 0){\r\n            // fold\r\n            return 2;\r\n        }\r\n        else{\r\n            let compHighCard: number = getHighCard([...computerCards,...tableCards]);\r\n            let playerHighCard: number = getHighCard([...userCards,...tableCards]);\r\n            if(compHighCard > playerHighCard){\r\n                // call\r\n                return 1;\r\n            }\r\n            else if(isPrime(randomNumber)){\r\n                // fold\r\n                return 3;\r\n            }\r\n            else{\r\n                return 1;\r\n            }\r\n        }\r\n\r\n    }\r\n    else{\r\n\r\n        if(computerHandRank > playerHandRank){\r\n            // determine whether to call or raise\r\n            if(randomNumber % 2 === 0){\r\n                // call\r\n                return 1;\r\n            }\r\n            else{\r\n                // fold\r\n                return 3;\r\n            }\r\n        }\r\n        else if(computerHandRank === playerHandRank){\r\n\r\n            if(randomNumber % 2 === 0){\r\n                // call\r\n                return 1;\r\n            }\r\n            else if(randomNumber % 2 !== 0){\r\n                // call\r\n                return 1;\r\n            }\r\n            else if(isPrime(randomNumber)){\r\n                // fold\r\n                return 3;\r\n            }\r\n            else{\r\n                return 1;\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return -1;\r\n\r\n}\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {ListGroup, Col} from 'react-bootstrap';\r\n\r\nexport const ScoreBoard = (props: {userWins: number, computerWins: number, userChips: number, computerChips: number, userLosses: number, computerLosses: number}): JSX.Element => {\r\n\r\n    return(\r\n        <>\r\n        <ListGroup horizontal style={{textAlign: \"center\"}}>\r\n            <Col><ListGroup.Item><h5 style={{textAlign: \"center\"}}>User Wins : {props.userWins}</h5></ListGroup.Item></Col>\r\n            <Col><ListGroup.Item><h5 style={{textAlign: \"center\"}}>Computer Wins : {props.computerWins}</h5></ListGroup.Item></Col>\r\n            <Col><ListGroup.Item><h5 style={{textAlign: \"center\"}}>User Chips : {props.userChips}</h5></ListGroup.Item></Col>\r\n            <Col><ListGroup.Item><h5 style={{textAlign: \"center\"}}>Computer Chips : {props.computerChips}</h5></ListGroup.Item></Col>\r\n            <Col><ListGroup.Item><h5 style={{textAlign: \"center\"}}>User Losses : {props.userLosses}</h5></ListGroup.Item></Col>\r\n            <Col><ListGroup.Item><h5 style={{textAlign: \"center\"}}>Computer Losses : {props.computerLosses}</h5></ListGroup.Item></Col>\r\n        </ListGroup>\r\n        </>\r\n    );\r\n\r\n}","import { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Modal,Button,Form, Row, Col} from 'react-bootstrap';\r\n\r\nexport const RaiseForm = (props: {appear: boolean, playerChips: number, raiseAmt: number, raiseFunc: (decision: number, amt: number) => void}): JSX.Element => {\r\n\r\n    const [chipAmount,setChipAmount] = useState<string>(\"0\");\r\n\r\n    return(\r\n\r\n        <>\r\n            <Row>\r\n                <Col>\r\n                    <Modal show={props.appear} onHide={() => {console.log(`calling onHide`)}}>\r\n                        <Modal.Header>\r\n                            Raise Demand : Amount [{props.raiseAmt}]\r\n                        </Modal.Header>\r\n                        <Modal.Footer>\r\n\r\n                            \r\n                        </Modal.Footer>\r\n                        <Row>\r\n                            <Col style={{textAlign: \"center\"}}>\r\n                                <Button variant=\"primary\" onClick={() => {props.raiseFunc(0,0)}}>Fold</Button>\r\n                            </Col>\r\n                            <Col style={{textAlign: \"center\"}}>\r\n                                <Button variant=\"primary\" onClick={() => {props.raiseFunc(1,props.raiseAmt)}}>Call</Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Modal>\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n\r\n        </>\r\n\r\n\r\n    );\r\n\r\n}","import { useState } from 'react';\r\nimport {Modal,Button,Form} from 'react-bootstrap';\r\n\r\nexport const ChipInitializer = (props: {appear: boolean, playerChips: number, submitChips: (amt: number) => void}): JSX.Element => {\r\n\r\n    const [chipAmount,setChipAmount] = useState<string>(\"0\");\r\n\r\n    return(\r\n\r\n        <>\r\n\r\n            <Modal show={props.appear} onHide={() => {console.log(`calling onHide`)}}>\r\n                <Modal.Header>\r\n                    Chip Amount\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Input amount of chips to enter\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n\r\n                    <Form>\r\n\r\n                        <Form.Group className=\"raiseText\" controlId=\"raiseAmt\">\r\n                            <Form.Label>Number of Chips to Enter [Current Amount : ${props.playerChips}</Form.Label>\r\n                            <Form.Control type=\"text\" value={chipAmount} placeholder={\"0\"} name={\"raiseForm\"}  onChange={(e) => {\r\n\r\n                                        let htmlInputElement = e.target as HTMLInputElement;\r\n\r\n                                        let value: number = parseInt(htmlInputElement.value);\r\n\r\n                                        if(isNaN(value)){\r\n                                            let tmpChipAmount = chipAmount;\r\n                                            tmpChipAmount = tmpChipAmount.substring(0,tmpChipAmount.length-1);\r\n                                            setChipAmount(tmpChipAmount);\r\n                                        }\r\n                                        else{\r\n                                            if(value > props.playerChips){\r\n                                                console.log(`chip amount = ${props.playerChips} and value = ${value}`);\r\n                                                alert('Not allowed to go above current chip amount');\r\n                                                let amt: number = parseInt(chipAmount) -1;\r\n                                                setChipAmount(String(amt));\r\n                                            }                                  \r\n                                            else if(value < 0){\r\n                                                alert('Not allowed to raise negative chips');\r\n                                                setChipAmount(\"0\");\r\n                                            }\r\n                                            else{\r\n                                                setChipAmount(String(value));\r\n                                            }\r\n                                        }\r\n\r\n                                    }}>\r\n                            </Form.Control>\r\n                            <Form.Text>Chip enter amount goes above ^^</Form.Text>\r\n                        </Form.Group>\r\n\r\n                    </Form>\r\n                    <Button variant=\"primary\" onClick={() => {\r\n\r\n                        props.submitChips(parseInt(chipAmount));\r\n\r\n                    }}>Submit amount</Button>\r\n\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n        </>\r\n\r\n\r\n    );\r\n\r\n}","import { useState } from 'react';\r\nimport {Modal,Button,Form} from 'react-bootstrap';\r\n\r\nexport const RaiseSend = (props: {appear: boolean, playerChips: number, raiseFunc: (amt: number) => void}): JSX.Element => {\r\n\r\n    const [chipAmount,setChipAmount] = useState<string>(\"0\");\r\n\r\n    return(\r\n\r\n        <>\r\n\r\n            <Modal show={props.appear} onHide={() => {console.log(`calling onHide`)}}>\r\n                <Modal.Header>\r\n                    Raise Demand\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Input amount to raise\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n\r\n                    <Form>\r\n\r\n                        <Form.Group className=\"raiseText\" controlId=\"raiseAmt\">\r\n                            <Form.Label>Number of Chips to Raise [Current Amount : ${props.playerChips}</Form.Label>\r\n                            <Form.Control type=\"text\" value={chipAmount} placeholder={\"0\"} name={\"raiseForm\"}  onChange={(e) => {\r\n\r\n\r\n                                    let htmlInputElement = e.target as HTMLInputElement;\r\n\r\n                                    let value: number = parseInt(htmlInputElement.value);\r\n                                \r\n                                    if(isNaN(value)){\r\n                                        let tmpChipAmount = chipAmount;\r\n                                        tmpChipAmount = tmpChipAmount.substring(0,tmpChipAmount.length-1);\r\n                                        setChipAmount(tmpChipAmount);\r\n                                    }\r\n                                    else{\r\n                                        if(value > props.playerChips){\r\n                                            console.log(`chip amount = ${props.playerChips} and value = ${value}`);\r\n                                            alert('Not allowed to go above current chip amount');\r\n                                            let amt: number = parseInt(chipAmount) -1;\r\n                                            setChipAmount(String(amt));\r\n                                        }                                  \r\n                                        else if(value < 0){\r\n                                            alert('Not allowed to raise negative chips');\r\n                                            setChipAmount(\"0\");\r\n                                        }\r\n                                        else{\r\n                                            setChipAmount(String(value));\r\n                                        }\r\n                                    }\r\n                                }}>\r\n                            </Form.Control>\r\n                            <Form.Text>Raise amount goes above ^^</Form.Text>\r\n                        </Form.Group>\r\n\r\n                    </Form>\r\n                    <Button variant=\"primary\" onClick={() => {props.raiseFunc(parseInt(chipAmount))}}>Raise Amount</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n        </>\r\n\r\n\r\n    );\r\n\r\n}","import React, {useState, useEffect} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Badge, Button, Container, Row, Col, Card} from 'react-bootstrap';\r\nimport {PokerCard} from './PokerCard';\r\nimport {ControlPanel} from './ControlPanel';\r\nimport {shuffle,cardCombos,computerDecide,computerDecideRaised} from '../utilities/PokerMethods';\r\nimport {ScoreBoard} from './ScoreBoard';\r\nimport {RaiseForm} from './RaiseForm';\r\nimport {ChipInitializer} from './ChipInitializer';\r\nimport {RaiseSend} from './RaiseSend';\r\n\r\n\r\nexport function MainPage(): JSX.Element{\r\n\r\n    const fullDeck: string[] = ['acehearts','kinghearts','queenhearts','jackhearts','tenhearts','ninehearts','eighthearts','sevenhearts','sixhearts','fivehearts','fourhearts','threehearts',\r\n    'twohearts','acediamonds','kingdiamonds','queendiamonds','jackdiamonds','tendiamonds','ninediamonds','eightdiamonds','sevendiamonds','sixdiamonds','fivediamonds',\r\n    'fourdiamonds','threediamonds','twodiamonds','acespades','kingspades','queenspades','jackspades','tenspades','ninespades','eightspades','sevenspades',\r\n    'sixspades','fivespades','fourspades','threespades','twospades','aceclubs','kingclubs','queenclubs','jackclubs','tenclubs','nineclubs','eightclubs',\r\n    'sevenclubs','sixclubs','fiveclubs','fourclubs','threeclubs','twoclubs'\r\n    ];\r\n\r\n    const [deck,setDeck] = useState<string[]>(shuffle(fullDeck));\r\n\r\n    // if move has been selected\r\n    const [moveSelected,setMoveSelected] = useState<boolean>(false);\r\n\r\n    /*\r\n\r\n    String arrays containing cards as string values\r\n\r\n    */\r\n    const [playerHand,setPlayerHand] = useState<string[]>([]); // Player hand as a string array\r\n    const [computerHand,setComputerHand] = useState<string[]>([]); // computer hand as a string array\r\n    const [tableCards,setTableCards] = useState<string[]>([]); // cards on table as a string array\r\n\r\n\r\n    /*\r\n\r\n    Boolean value containing whose turn it is\r\n\r\n    */\r\n\r\n    const [turn,setTurn] = useState<boolean>(true); // player turn as a boolean\r\n\r\n    /*\r\n\r\n    Number value containing total number of player chips, computer chips, and chips currently in play\r\n\r\n    */\r\n\r\n    const [computerChips,setComputerChips] = useState<number>(1000);\r\n    const [userChips,setUserChips] = useState<number>(1000);\r\n    const [totalChips,setTotalChips] = useState<number>(0);\r\n\r\n\r\n    /*\r\n\r\n    Number value containing total number of computer wins, and user wins\r\n\r\n    */\r\n\r\n    const [computerWins,setComputerWins] = useState<number>(0);\r\n    const [userWins,setUserWins] = useState<number>(0);\r\n\r\n    /*\r\n\r\n    Number value containing total number of computer and user losses\r\n\r\n    */\r\n\r\n    const [computerLosses,setComputerLosses] = useState<number>(0);\r\n    const [userLosses,setUserLosses] = useState<number>(0);\r\n\r\n\r\n    // If game has started\r\n    const [gameStarted,setGameStarted] = useState<boolean>(false); // boolean if game has started\r\n\r\n    // JSX Arrays that contain HTML Elements cards from string arrays\r\n    const [thePlayerCards,setThePlayerCards] = useState<JSX.Element[]>([]); // player cards as JSX Elements\r\n    const [theTableCards,setTheTableCards] = useState<JSX.Element[]>([]); // Table Cards as JSX Elements\r\n    const [theComputerCards,setTheComputerCards] = useState<JSX.Element[]>([]); // Computer Cards as JSX Elements\r\n\r\n    // text of the main button \r\n    const [mainButtonText,setMainButtonText] = useState<string>(\"Start Game\"); // main button text as string\r\n\r\n    // track state of game\r\n    const [raise,setRaise] = useState<boolean>(false);\r\n    const [userRaise,setUserRaise] = useState<boolean>(false);\r\n    const [raiseAmt,setRaiseAmt] = useState<number>(0);\r\n\r\n    const [call,setCall] = useState<boolean>(false);\r\n\r\n    const [strengthText,setStrengthText] = useState<string>(\"\");\r\n\r\n    const [modalAppear,setModalAppear] = useState<boolean>(false);\r\n\r\n    /*\r\n    #################\r\n    END GAME FUNCTION\r\n    #################\r\n    */\r\n\r\n    const endGame = (user: number) => {\r\n\r\n        let tmpCmpLosses: number = computerLosses;\r\n        let tmpUserLosses: number = userLosses;\r\n        let tmpCmpWins: number = computerWins;\r\n        let tmpUserWins: number = userWins;\r\n\r\n        if(user === 2){\r\n            // computer lost\r\n            setComputerLosses(++tmpCmpLosses);\r\n            setUserWins(++tmpUserWins);\r\n            let tmpUserChips = userChips;\r\n            tmpUserChips += totalChips;\r\n            setUserChips(tmpUserChips);\r\n            alert('Computer lost');\r\n        }\r\n        else if(user === 1){\r\n            setUserLosses(++tmpUserLosses);\r\n            setComputerWins(++tmpCmpWins);\r\n            let tmpComputerChips = computerChips;\r\n            tmpComputerChips += totalChips;\r\n            setComputerChips(tmpComputerChips);\r\n            alert('User lost');\r\n        }\r\n        else{\r\n            let halfOfChips = Math.round(totalChips / 2);\r\n            let tmpComputerChips = computerChips;\r\n            tmpComputerChips += halfOfChips;\r\n            setComputerChips(tmpComputerChips);\r\n            let tmpUserChips = userChips;\r\n            tmpUserChips += halfOfChips;\r\n            setUserChips(tmpUserChips);\r\n            alert('Tie!');\r\n        }\r\n        setDeck(shuffle(fullDeck));\r\n        setGameStarted(false);\r\n        setTurn(true);\r\n        setRaise(false);\r\n        setCall(false);\r\n        setStrengthText(\"\");\r\n        setPlayerHand([]);\r\n        setComputerHand([]);\r\n        setTableCards([]);\r\n        setThePlayerCards([]);\r\n        setTheComputerCards([]);\r\n        setTheTableCards([]);\r\n        setTotalChips(0);\r\n        setMoveSelected(false);\r\n        setUserRaise(false);\r\n\r\n    }\r\n\r\n    /*\r\n           #########################\r\n            <<<<< USE EFFECTS >>>>>\r\n           #########################\r\n\r\n    */\r\n\r\n    useEffect(() => {\r\n\r\n        // check if turn is players or computers\r\n\r\n        if(moveSelected){\r\n            // user selected move\r\n            let compDecision: number = computerDecide(playerHand,computerHand,tableCards);\r\n            if(compDecision === 3){\r\n                // fold\r\n                // end game\r\n                endGame(2);\r\n            }\r\n            else if(compDecision === 2){\r\n                alert('Computer raises');\r\n                //setRaise(true);\r\n                setMoveSelected(false);\r\n                let raiseAmount: number = Math.ceil(Math.ceil(Math.random()+(computerChips / 10)) * (totalChips % 10));\r\n\r\n                setRaiseAmt(raiseAmount);\r\n                // implement raise functionality\r\n                // raise.. then reset moveSelected, maybe have option to fold in reset modal\r\n                // return answer as int, 0 is fold, 1 is call, 2 is re-raise with new amt\r\n                // maybe record answer in state or return in function\r\n                setRaise(true); // makes modal appear\r\n            }\r\n            else{\r\n                if(tableCards.length === 5){\r\n                    // conduct endgame function\r\n                    let compRank = cardCombos([...computerHand,...tableCards]);\r\n                    let userRank = cardCombos([...playerHand,...tableCards]);\r\n                    if(userRank > compRank){\r\n                        endGame(2);\r\n                    }\r\n                    else if(userRank < compRank){\r\n                        endGame(1);\r\n                    }\r\n                    else{\r\n                        endGame(0);\r\n                    }\r\n                }\r\n                else{\r\n                    alert('Computer calls');\r\n                    setMoveSelected(false);\r\n                    drawCards(false,deck,setDeck,tableCards,setTableCards,1,setTheTableCards);\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    },[moveSelected]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setMainButtonText(\"Deal Table Cards\");\r\n\r\n    },[playerHand,computerHand]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(gameStarted){\r\n\r\n            let handRank: number = cardCombos([...playerHand,...tableCards]);\r\n\r\n            let handStrength: string = \"\";\r\n\r\n            switch(handRank){\r\n\r\n                case 1:\r\n                    handStrength = \"Royal Flush\";\r\n                    break;\r\n                case 2:\r\n                    handStrength = \"Straight Flush\";\r\n                    break;\r\n                case 3:\r\n                    handStrength = \"Four of a Kind\";\r\n                    break\r\n                case 4:\r\n                    handStrength = \"Full House\";\r\n                    break;\r\n                case 5:\r\n                    handStrength = \"Flush\";\r\n                    break;\r\n                case 6:\r\n                    handStrength = \"Straight\";\r\n                    break;\r\n                case 7:\r\n                    handStrength = \"Three of a Kind\";\r\n                    break;\r\n                case 8:\r\n                    handStrength = \"Two Pairs\";\r\n                    break;\r\n                case 9:\r\n                    handStrength = \"Pair\";\r\n                    break;\r\n                default:\r\n                    handStrength = \"High Card\";\r\n                    break;\r\n\r\n            }\r\n            console.log(`hand strength = ${handStrength}`);\r\n            setStrengthText(handStrength);\r\n        }\r\n\r\n\r\n    },[tableCards]);\r\n\r\n    /*\r\n\r\n            <<<<< USE EFFECTS >>>>>\r\n\r\n    */\r\n\r\n    const callClick = (): void => {\r\n\r\n        if(!moveSelected){\r\n            // user presses call\r\n            setCall(true);\r\n            setMoveSelected(true);\r\n            alert('User selects call');\r\n        }\r\n        else{\r\n            alert(`Already selected : ${call? \"call\": \"raise\"}`);\r\n        }\r\n\r\n    }\r\n\r\n    const foldClick = (): void => {\r\n\r\n        if(!moveSelected){\r\n            // user presses fold\r\n            endGame(1);\r\n        }\r\n\r\n    } \r\n\r\n    const raiseClick = (): void => {\r\n\r\n        if(gameStarted){\r\n            setUserRaise(true);\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n\r\n    Raise functions\r\n\r\n    */\r\n\r\n    const userRaiseFunc = (amt: number): void => {\r\n\r\n        if(amt > computerChips){\r\n            endGame(2);\r\n        }\r\n        else{\r\n\r\n            let cmpDecisionR = computerDecideRaised(playerHand,computerHand,tableCards);\r\n            if(cmpDecisionR === 1){\r\n                // called\r\n                // deduct chips and forward turn\r\n                let tmpComputerChips = computerChips;\r\n                tmpComputerChips -= amt;\r\n                let tmpTotalChips = totalChips;\r\n                tmpTotalChips += amt;\r\n                setComputerChips(tmpComputerChips);\r\n                let tmpUserChips = userChips;\r\n                tmpUserChips -= amt;\r\n                setTotalChips(totalChips);\r\n                setUserChips(tmpUserChips);\r\n                if(tableCards.length === 5){\r\n                    let compRank = cardCombos([...computerHand,...tableCards]);\r\n                    let userRank = cardCombos([...playerHand,...tableCards]);\r\n                    if(userRank > compRank){\r\n                        endGame(2);\r\n                    }\r\n                    else if(userRank < compRank){\r\n                        endGame(1);\r\n                    }\r\n                    else{\r\n                        endGame(0);\r\n                    }\r\n                }\r\n                else{\r\n                    setMoveSelected(false);\r\n                    drawCards(false,deck,setDeck,tableCards,setTableCards,1,setTheTableCards);\r\n                }\r\n            }\r\n            else{\r\n                endGame(2);\r\n            }\r\n\r\n        }\r\n        setUserRaise(false);\r\n\r\n    }\r\n\r\n    const raiseFunc = (decision: number, amt: number): void => {\r\n\r\n        if(decision === 0){\r\n            // user folded\r\n            endGame(1);\r\n        }\r\n        else if(decision === 1){\r\n            // called amount\r\n            // deduct chips from user\r\n            console.log(`raising from comp`);\r\n            let tmpUserChips = userChips;\r\n            tmpUserChips -= amt;\r\n            setUserChips(tmpUserChips);\r\n            let tmpTotalChips = totalChips;\r\n            tmpTotalChips += amt;\r\n            setTotalChips(tmpTotalChips);\r\n            setRaiseAmt(0);\r\n            if(tableCards.length === 5){\r\n                // conduct endgame function\r\n                let compRank = cardCombos([...computerHand,...tableCards]);\r\n                let userRank = cardCombos([...playerHand,...tableCards]);\r\n                if(userRank > compRank){\r\n                    endGame(2);\r\n                }\r\n                else if(userRank < compRank){\r\n                    endGame(1);\r\n                }\r\n                else{\r\n                    endGame(0);\r\n                }\r\n            }\r\n        }\r\n        setRaise(false);\r\n\r\n    }\r\n\r\n    /*\r\n\r\n            <<<<<<<< ESSENTIAL FUNCTIONS >>>>>>>>\r\n\r\n\r\n    */\r\n\r\n\r\n    const drawCards = (isComputer: boolean, deck: string[], setDeck: React.Dispatch<React.SetStateAction<string[]>>, hand: string[], setHand: React.Dispatch<React.SetStateAction<string[]>>, amount: number, setJSXHand: React.Dispatch<React.SetStateAction<JSX.Element[]>>) => {\r\n\r\n        let cardsDrawn: string[] = [];\r\n\r\n        for(let i = 0; i < amount; i++){\r\n\r\n            let theCard: string | undefined = deck.pop();\r\n            if(theCard !== undefined){\r\n                cardsDrawn.push(theCard);\r\n            }\r\n\r\n        }\r\n        setDeck([...deck]);\r\n\r\n        hand = hand.concat([...cardsDrawn]);\r\n        \r\n        setHand([...hand]);\r\n\r\n        let newHand: JSX.Element[] = hand.map(e => {\r\n\r\n            return(\r\n\r\n                <PokerCard cardName={isComputer? \"backofcard\": e} key={e}/>\r\n\r\n            );\r\n\r\n        });\r\n\r\n        setJSXHand([...newHand]);\r\n\r\n    }\r\n\r\n    const startGame = (): void => {\r\n\r\n        if(!gameStarted){\r\n            // first turn\r\n            drawCards(false,deck,setDeck,playerHand,setPlayerHand,2,setThePlayerCards);\r\n            drawCards(false,deck,setDeck,tableCards,setTableCards,3,setTheTableCards);\r\n            drawCards(true,deck,setDeck,computerHand,setComputerHand,2,setTheComputerCards);\r\n            setGameStarted(true);\r\n            setModalAppear(true);\r\n        }\r\n        else{\r\n            if(tableCards.length === 5){\r\n                alert('Cannot deal more table cards, max amount is 5');\r\n            }\r\n            else if(!moveSelected){\r\n                alert('Select a move before advancing turn');\r\n            }\r\n            else{\r\n                drawCards(false,deck,setDeck,tableCards,setTableCards,1,setTheTableCards);\r\n                setTurn(!turn);\r\n            }\r\n        }\r\n    \r\n    }\r\n\r\n    // if you raise computer must call or fold\r\n\r\n    return(\r\n        \r\n        <>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col><h1 style={{textAlign: \"center\"}}>Poker Game</h1></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <ScoreBoard userWins={userWins} computerWins={computerWins} userChips={userChips} computerChips={computerChips} userLosses={userLosses} computerLosses={computerLosses} />\r\n                    </Row>\r\n                    <Row>\r\n                        <Card>\r\n                        <Col><Card.Body><h5 style={{textAlign: \"center\"}}>Total Chips : {totalChips}</h5></Card.Body></Col>\r\n                        </Card>\r\n                    </Row>\r\n\r\n                    <br />\r\n                    <Badge bg={\"primary\"} style={{textAlign: \"center\", display: \"block\"}}>Current Hand Strength :  {strengthText}</Badge>\r\n                    <br />\r\n                    <Row>\r\n                        <Col>\r\n\r\n                            <h4 style={{textAlign: \"center\"}}>Table Cards</h4>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n\r\n                        <Col style={{border: \"2px dashed black\"}}>{theTableCards}</Col>\r\n\r\n                    </Row>\r\n                    <br />\r\n                    <Row>\r\n\r\n                        <Col>\r\n                        \r\n                        <h4 style={{textAlign: \"center\"}}>Computer Cards</h4>\r\n                        \r\n                        </Col>\r\n\r\n                    </Row>\r\n                    <Row>\r\n\r\n                        <Col style={{border: \"2px dashed black\"}}>{theComputerCards}</Col>\r\n\r\n                    </Row>\r\n                    <Row>\r\n                        <Col style={{textAlign: \"center\"}}><h4>Player Cards</h4></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col style={{border: \"2px dashed black\"}}>{thePlayerCards}</Col>\r\n                    </Row>\r\n                    <br />\r\n                    <ControlPanel theTurn={turn} callFunc={callClick} foldFunc={foldClick} raiseFunc={raiseClick} />\r\n                    <br />\r\n                    <br />\r\n                    <Row>\r\n\r\n                        <Col>\r\n                            <Button variant={turn? \"primary\": \"secondary\"} onClick={startGame} style={{margin: \"auto\", display: \"block\", textAlign: \"center\"}} id=\"mainButton\" >{mainButtonText}</Button>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                    <Row>\r\n                        <Col><RaiseForm appear={raise} playerChips={userChips} raiseAmt={raiseAmt} raiseFunc={raiseFunc}/></Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col><ChipInitializer appear={modalAppear} submitChips={(amt: number) => {\r\n\r\n                            let tmpUserChips = userChips;\r\n                            tmpUserChips -= amt;\r\n\r\n                            if(amt > computerChips){\r\n                                amt += computerChips;\r\n                                setComputerChips(0);\r\n                            }\r\n                            else{\r\n                                let tmpComputerChips: number = computerChips;\r\n                                tmpComputerChips -= amt;\r\n                                amt += amt;\r\n                                setComputerChips(tmpComputerChips);\r\n                            }\r\n                            setTotalChips(amt);\r\n\r\n\r\n                            setUserChips(tmpUserChips);\r\n                            setModalAppear(false);\r\n\r\n                        }} playerChips={userChips}/></Col>\r\n                    </Row>\r\n                    <Row>\r\n\r\n                        <Col>\r\n                        \r\n                            <RaiseSend appear={userRaise} playerChips={userChips} raiseFunc={userRaiseFunc}/>\r\n\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n\r\n\r\n    );\r\n\r\n}","import {MainPage} from './components/MainPage';\r\n\r\n\r\nexport const App = (): JSX.Element => {\r\n\r\n    return(\r\n\r\n        <MainPage />\r\n\r\n    );\r\n\r\n}","import {App} from './App';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nReactDOM.render(\r\n\r\n    <React.StrictMode>\r\n\r\n    <App />\r\n\r\n</React.StrictMode>,document.getElementById('root')\r\n\r\n);"],"sourceRoot":""}